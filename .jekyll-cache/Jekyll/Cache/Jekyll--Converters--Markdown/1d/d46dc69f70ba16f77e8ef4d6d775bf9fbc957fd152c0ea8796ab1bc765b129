I"•a<h3 id="ui-test-automation-continued-where-did-we-get-to">UI test automation continuedâ€¦ where did we get to?</h3>
<p>In the <a href="https://blog.codeglee.com/2022/03/23/an-automation-approach-pt3.html">previous post</a>, we fleshed out our onboarding flow and added UI tests for covering onboarding and the transition to our main content view.
In so doing, we hit the issue of <em>test pollution</em> as a result of using shared <code class="language-plaintext highlighter-rouge">UserDefaults</code> across tests.</p>

<p>In this post, weâ€™ll address this issue by:</p>

<ul>
  <li>Introducing a <code class="language-plaintext highlighter-rouge">Dependencies</code> environment object that weâ€™ll use app-wide for our concrete dependencies.</li>
  <li>Refactoring our <code class="language-plaintext highlighter-rouge">SettingStore</code> to use a protocol for <code class="language-plaintext highlighter-rouge">UserDefaults</code></li>
  <li>Introducing an in-memory <code class="language-plaintext highlighter-rouge">UserDefaults</code> replacement that we can configure for our tests</li>
</ul>

<h4 id="lets-review-our-settingstore-implementation">Letâ€™s review our <code class="language-plaintext highlighter-rouge">SettingStore</code> implementation</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">shared</span> <span class="o">=</span> <span class="kt">SettingStore</span><span class="p">()</span>
    <span class="kd">private</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{}</span>

    <span class="k">var</span> <span class="nv">showOnboarding</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span>
            <span class="o">!</span><span class="kt">UserDefaults</span><span class="o">.</span><span class="n">standard</span><span class="o">.</span><span class="nf">bool</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="s">"hasOnboardingBeenShown"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="kt">UserDefaults</span><span class="o">.</span><span class="n">standard</span><span class="o">.</span><span class="nf">set</span><span class="p">(</span><span class="o">!</span><span class="n">newValue</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="s">"hasOnboardingBeenShown"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Whatâ€™s wrong here? well, a number of thingsâ€¦</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">UserDefaults.standard</code> is a shared resource that can be mutated by any test in our test suite, at any time (if tests are run in parallel), <em>this is our core issue</em></li>
  <li>Weâ€™re tightly coupling this class with the concrete class <code class="language-plaintext highlighter-rouge">UserDefaults</code></li>
  <li>We canâ€™t safely unit test <code class="language-plaintext highlighter-rouge">SettingStore</code> given itâ€™s reliance on a concretion, not an abstraction</li>
  <li>Weâ€™re using string constants which are less maintainable and more error prone (typos are easy to make and hard to spot!)</li>
</ol>

<p>Letâ€™s address all of these issues. As weâ€™re currently only interacting with <code class="language-plaintext highlighter-rouge">UserDefaults</code> via a <code class="language-plaintext highlighter-rouge">boolean</code> letâ€™s just handle that scenario for now. Weâ€™ll start by introducing an enum for our settings keys<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">SettingStoreKey</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">hasOnboardingBeenShown</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Then weâ€™ll introduce an abstraction around our <code class="language-plaintext highlighter-rouge">UserDefaults</code> scenario.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">UserDefaultInterfacing</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">,</span> <span class="n">forKey</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">SettingStoreKey</span><span class="p">)</span>
    <span class="kd">func</span> <span class="nf">bool</span><span class="p">(</span><span class="n">forKey</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">SettingStoreKey</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Before we conform <code class="language-plaintext highlighter-rouge">UserDefaults</code> to it, note weâ€™re using our <code class="language-plaintext highlighter-rouge">SettingStoreKey</code> here, this will make the call site nicer to work with.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">UserDefaults</span><span class="p">:</span> <span class="kt">UserDefaultInterfacing</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">,</span> <span class="n">forKey</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">SettingStoreKey</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">set</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="n">key</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">bool</span><span class="p">(</span><span class="n">forKey</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">SettingStoreKey</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="nf">bool</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="n">key</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Finally, we update our <code class="language-plaintext highlighter-rouge">SettingStore</code> with the injected abstraction with <code class="language-plaintext highlighter-rouge">UserDefaults</code> as our default for our app.
<strong><em>NOTE:</em></strong> We remove the private initialiser and our singleton as we want to ensure weâ€™re using the correct instance everywhere.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">userDefaults</span><span class="p">:</span> <span class="kt">UserDefaultInterfacing</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">userDefaults</span><span class="p">:</span> <span class="kt">UserDefaultInterfacing</span> <span class="o">=</span> <span class="kt">UserDefaults</span><span class="o">.</span><span class="n">standard</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">userDefaults</span> <span class="o">=</span> <span class="n">userDefaults</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">showOnboarding</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span>
            <span class="o">!</span><span class="n">userDefaults</span><span class="o">.</span><span class="nf">bool</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">hasOnboardingBeenShown</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="n">userDefaults</span><span class="o">.</span><span class="nf">set</span><span class="p">(</span><span class="o">!</span><span class="n">newValue</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">hasOnboardingBeenShown</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><em>Great!</em> now weâ€™ve got a unit-testable <code class="language-plaintext highlighter-rouge">SettingStore</code> and a reusable abstraction over <code class="language-plaintext highlighter-rouge">UserDefaults</code>.</p>

<p>Letâ€™s move on to our UI test affordance, weâ€™ll create a non-persisted in-memory cached dictionary equivalent of <code class="language-plaintext highlighter-rouge">UserDefaults</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">InMemoryUserDefaults</span><span class="p">:</span> <span class="kt">UserDefaultInterfacing</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">cache</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>

    <span class="kd">func</span> <span class="nf">set</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">,</span> <span class="n">forKey</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">SettingStoreKey</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cache</span><span class="p">[</span><span class="n">key</span><span class="o">.</span><span class="n">rawValue</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">bool</span><span class="p">(</span><span class="n">forKey</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">SettingStoreKey</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="n">cache</span><span class="p">[</span><span class="n">key</span><span class="o">.</span><span class="n">rawValue</span><span class="p">]</span> <span class="p">??</span> <span class="kc">false</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><strong><em>NOTE:</em></strong> This is a naive implementation, weâ€™re not handling additional functionality present in <code class="language-plaintext highlighter-rouge">UserDefaults</code> such as the ability to <code class="language-plaintext highlighter-rouge">register defaults</code>. If your app needs this, bear that in mind.</p>

<p><em>Cool!</em> letâ€™s move on to our UI test interface through <code class="language-plaintext highlighter-rouge">LaunchArgumentConfigurator</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">LaunchArgumentConfigurator</span> <span class="p">{</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">configure</span><span class="p">(</span>
        <span class="n">_</span> <span class="nv">dependencies</span><span class="p">:</span> <span class="kt">Dependencies</span><span class="p">,</span>
        <span class="n">with</span> <span class="nv">launchArguments</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">launchArguments</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="kt">LaunchArgumentKey</span><span class="o">.</span><span class="n">useInMemoryUserDefaults</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dependencies</span><span class="o">.</span><span class="nf">replace</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">SettingStore</span><span class="p">(</span><span class="nv">userDefaults</span><span class="p">:</span> <span class="kt">InMemoryUserDefaults</span><span class="p">()))</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="n">launchArguments</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="kt">LaunchArgumentKey</span><span class="o">.</span><span class="n">skipOnboarding</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">dependencies</span><span class="o">.</span><span class="n">settingStore</span><span class="o">.</span><span class="n">showOnboarding</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">enum</span> <span class="kt">LaunchArgumentKey</span> <span class="p">{</span>
    <span class="c1">// NOTE: We add a key to use for UI tests</span>
    <span class="k">case</span> <span class="n">useInMemoryUserDefaults</span> <span class="o">=</span> <span class="s">"-useInMemoryUserDefaults"</span>
    <span class="o">...</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Wait, where did <code class="language-plaintext highlighter-rouge">AutomationContext</code> go? and what is <code class="language-plaintext highlighter-rouge">Dependencies</code>?
Let me show you what <code class="language-plaintext highlighter-rouge">Dependencies</code> does and weâ€™ll circle back.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">Dependencies</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">shared</span> <span class="o">=</span> <span class="kt">Dependencies</span><span class="p">()</span>

    <span class="kd">private(set)</span> <span class="k">var</span> <span class="nv">settingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span>

    <span class="kd">private</span> <span class="nf">init</span><span class="p">(</span><span class="nv">settingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span> <span class="o">=</span> <span class="kt">SettingStore</span><span class="p">(</span><span class="nv">userDefaults</span><span class="p">:</span> <span class="kt">UserDefaults</span><span class="o">.</span><span class="n">standard</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">settingStore</span> <span class="o">=</span> <span class="n">settingStore</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">replace</span><span class="p">(</span><span class="n">with</span> <span class="nv">settingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">settingStore</span> <span class="o">=</span> <span class="n">settingStore</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>So <code class="language-plaintext highlighter-rouge">Dependencies</code> is a simple dependency container we can use to inject either the app <code class="language-plaintext highlighter-rouge">UserDefaults</code> implementation or our in-memory test alternative.</p>

<p><strong><em>NOTE:</em></strong> When it comes to implementing <em>Networking</em> in our app, we could use this same dependency container approach in order to switch between an app-default or a static, offline alternative.</p>

<p>If you build at this point, youâ€™d notice thereâ€™s an error here:
<code class="language-plaintext highlighter-rouge">dependencies.settingStore.showOnboarding = false</code></p>

<p>With the error:
 <code class="language-plaintext highlighter-rouge">Cannot assign to property: 'settingStore' setter is inaccessible</code>.</p>

<p>This is because our <code class="language-plaintext highlighter-rouge">SettingStorage protocol</code> isnâ€™t type-constrained so it could be conformed to by an <code class="language-plaintext highlighter-rouge">immutable struct</code> or a <code class="language-plaintext highlighter-rouge">class</code>. If it were a <code class="language-plaintext highlighter-rouge">struct</code>, the compiler canâ€™t tell if it would be mutable hence the error. We need to be more specific. Here Iâ€™ll just say <code class="language-plaintext highlighter-rouge">SettingStorage</code> has to be implemented by a <code class="language-plaintext highlighter-rouge">class</code> by constraining to <code class="language-plaintext highlighter-rouge">AnyObject</code> this limits <code class="language-plaintext highlighter-rouge">SettingStorage</code> to <code class="language-plaintext highlighter-rouge">classes</code> exclusively which, as reference types, are freely mutable:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">SettingStorage</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
</code></pre></div></div>

<p>So, where did <code class="language-plaintext highlighter-rouge">AutomationContext</code> go? Well, for now, itâ€™s performing the same role as <code class="language-plaintext highlighter-rouge">Dependencies</code> so weâ€™ve removed it, however as we build other UI-test specific flows we may bring it back.</p>

<p>Letâ€™s update any references to <code class="language-plaintext highlighter-rouge">SettingStore.shared</code> with <code class="language-plaintext highlighter-rouge">Dependencies.shared.settingStore</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">AppViewModel</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">settingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span> <span class="o">=</span> <span class="kt">Dependencies</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="n">settingStore</span><span class="p">)</span>
    <span class="o">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The very last task is to update our UI tests so they trigger use of our safe, testable in-memory alternative.</p>

<p>In <code class="language-plaintext highlighter-rouge">BaseUITestCase</code> we add:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">func</span> <span class="nf">useTestSafeUserDefaults</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">launchArguments</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="kt">LaunchArgumentKey</span><span class="o">.</span><span class="n">useInMemoryUserDefaults</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>We could add this call in both our <code class="language-plaintext highlighter-rouge">OnboardingView</code> and <code class="language-plaintext highlighter-rouge">ContentView</code> tests, however as we want all our UI tests to be safe and predictable by default, weâ€™ll add it to our <code class="language-plaintext highlighter-rouge">BaseUITestCase</code>â€™s <code class="language-plaintext highlighter-rouge">setUp</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">override</span> <span class="kd">func</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
        <span class="o">...</span>
        <span class="n">launchArguments</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">(</span><span class="n">app</span><span class="o">.</span><span class="n">launchArguments</span><span class="p">)</span>
        <span class="nf">useTestableUserDefaults</span><span class="p">()</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>Letâ€™s re-run our tests, in parallel and randomly and run them 100 times to be sure we fixed the <em>test pollution</em> issue.
Hereâ€™s how you set up parallel test running, go to <code class="language-plaintext highlighter-rouge">Scheme &gt; Tests &gt; Info &gt; Options</code>:</p>

<p><img src="/assets/images/tests-run-in-parallel.png" alt="alt text" title="Scheme &gt; Tests &gt; Info &gt; Options showing the parallel and random run options" /></p>

<p>Hereâ€™s how you set up repeated test runs:</p>

<p><em>Right-click your UI test project and pick run repeatedly</em>
<img src="/assets/images/tests-run-repeatedly.png" alt="alt text" title="Showing the repeated test run options" /></p>

<p><em>Decide on your scenario and conditions</em>
<img src="/assets/images/tests-run-repeatedly-dialog.png" alt="alt text" title="Showing the repeated test run option dialog" /></p>

<h3 id="the-result">The result?</h3>
<p>All our tests pass, in any order, regardless of being run in parallel.
As <a href="">Paul Hudson points out</a>
Repeatable, No test flakeyness in sight.</p>

<h4 id="so-what-did-we-cover">So what did we cover?</h4>

<ol>
  <li>We introduced a Dependency container that weâ€™ll use app-wide for our replaceable concrete dependencies.</li>
  <li>We refactored our <code class="language-plaintext highlighter-rouge">SettingStore</code> to use an injectable protocol for <code class="language-plaintext highlighter-rouge">UserDefaults</code>, making our <code class="language-plaintext highlighter-rouge">SettingsStore</code> unit testable.</li>
  <li>We introduced an in-memory <code class="language-plaintext highlighter-rouge">UserDefaults</code> replacement that we configured through our UI tests</li>
  <li>We ran our tests and proved that weâ€™ve fixed our core issues.</li>
</ol>

<h3 id="what-do-we-do-next">What do we do next?</h3>
<p>Weâ€™ll take a look at approaches for handling networking.
Well also look at how you can wait for state changes that take time (for animations to finish or networking to complete, for example).</p>

<p>I hope this post was informative, feel free to send me your thoughts via Twitter.</p>

<p><strong>Footnotes</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><em>Consider the rule of three before introducing a enum for constants like this</em>Â <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET