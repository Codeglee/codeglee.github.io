I"OY<h3 id="ui-test-automation-continued-where-did-we-get-to">UI test automation continued… where did we get to?</h3>
<p>In the <a href="https://blog.codeglee.com/2022/03/23/an-automation-approach-pt1.html">previous post</a>, we covered the setup required to externally initialise and configure our app such that the onboarding app flow could be skipped for UI test purposes.</p>

<p>In this post we’ll:</p>

<ul>
  <li>Introduce an approach for shared automation identifiers</li>
  <li>Improve our app initialisation via a shared typed enum</li>
  <li>Swap our string constants for enum-based ones</li>
  <li>Encapsulate our screens behaviours and assertions using the Robot pattern</li>
  <li>Pass our failing UI test verifying that our onboarding approach works</li>
</ul>

<h4 id="app-side-launcharguments">App-side LaunchArguments</h4>
<p>We’ll start by addressing the launch arguments<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>.
Let’s start on the app side by encapsulating the string constant into a <code class="language-plaintext highlighter-rouge">LaunchArgumentKey enum</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">LaunchArgumentKey</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">skipOnboarding</span> <span class="o">=</span> <span class="s">"-skipOnboarding"</span>
<span class="p">}</span>
</code></pre></div></div>
<p>We’ll make this <code class="language-plaintext highlighter-rouge">enum</code> <em>shared</em> across both the App and UI Test targets.</p>

<p>On the app side we’ll update our <code class="language-plaintext highlighter-rouge">LaunchArgumentConfigurator</code> to use <code class="language-plaintext highlighter-rouge">LaunchArgumentKey</code>.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">LaunchArgumentConfigurator</span> <span class="p">{</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">configure</span><span class="p">(</span>
        <span class="n">_</span> <span class="nv">context</span><span class="p">:</span> <span class="kt">AutomationContext</span><span class="p">,</span>
        <span class="n">with</span> <span class="nv">launchArguments</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">launchArguments</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="kt">LaunchArgumentKey</span><span class="o">.</span><span class="n">skipOnboarding</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">context</span><span class="o">.</span><span class="n">showOnboarding</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong><em>NOTE:</em></strong> If we had more launch arguments, particularly ones with associated values we could do some more interesting and intelligent configuration but for now this is enough to increase maintainability.</p>

<p>Next, on the UI test side, we’ll introduce a helper class to better manage launch arguments. This gives us a reusable abstraction over launch arguments.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">BaseUITestCase</span><span class="p">:</span> <span class="kt">XCTestCase</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">app</span><span class="p">:</span> <span class="kt">XCUIApplication</span><span class="o">!</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">launchArguments</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">()</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">setUp</span><span class="p">()</span>
        <span class="n">continueAfterFailure</span> <span class="o">=</span> <span class="kc">false</span>

        <span class="n">app</span> <span class="o">=</span> <span class="kt">XCUIApplication</span><span class="p">()</span>

        <span class="n">app</span><span class="o">.</span><span class="n">launchArguments</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="n">argument</span> <span class="k">in</span>
            <span class="n">launchArguments</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">tearDown</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">app</span> <span class="o">=</span> <span class="kc">nil</span>

        <span class="k">super</span><span class="o">.</span><span class="nf">tearDown</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">skipOnboarding</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">launchArguments</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="kt">LaunchArgumentKey</span><span class="o">.</span><span class="n">skipOnboarding</span><span class="o">.</span><span class="n">rawValue</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">launch</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">arguments</span> <span class="o">=</span> <span class="n">launchArguments</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="nv">into</span><span class="p">:</span> <span class="p">[],</span> <span class="p">{</span> <span class="n">result</span><span class="p">,</span> <span class="n">argument</span> <span class="k">in</span>
            <span class="n">result</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">argument</span><span class="p">)</span>
        <span class="p">})</span>
        <span class="n">app</span><span class="o">.</span><span class="n">launchArguments</span> <span class="o">=</span> <span class="n">arguments</span>
        <span class="n">app</span><span class="o">.</span><span class="nf">launch</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>For context around use of <code class="language-plaintext highlighter-rouge">XCUIApplication!</code> see here<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>.</p>

<h4 id="revisiting-our-ui-test">Revisiting our UI test</h4>
<p>Here’s our test case updated to use <code class="language-plaintext highlighter-rouge">skipOnboarding</code> and <code class="language-plaintext highlighter-rouge">launch</code> for the Main App Flow.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">ContentViewTests</span><span class="p">:</span> <span class="kt">BaseUITestCase</span> <span class="p">{</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">setUp</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">setUp</span><span class="p">()</span>

        <span class="nf">skipOnboarding</span><span class="p">()</span>
        <span class="nf">launch</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="cm">/*
     GIVEN we've previously seen the onboarding flow
     WHEN the app starts
     THEN the main app flow is shown
     */</span>
    <span class="kd">func</span> <span class="nf">testAfterSkippingOnboardingContentViewIsVisible</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">XCTFail</span><span class="p">(</span><span class="s">"We can't assert anything yet"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Great, we’ve made it simple to skip onboarding as part of <code class="language-plaintext highlighter-rouge">setUp</code> but we have nothing to assert we’re on the right view yet, let’s address that now.</p>

<h4 id="an-approach-for-accessibility-identifiers">An approach for accessibility identifiers</h4>
<p>For us to verify we’re on a particular screen we need something to look for, in the app we add a shared enum modelled as screens with identifiable parts. Pick a naming convention that works for you and ensures uniqueness.</p>

<p><strong><em>NOTE:</em></strong> We share the <code class="language-plaintext highlighter-rouge">Automation</code> enum across both app and test targets.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Automation</span> <span class="p">{</span>
    <span class="kd">enum</span> <span class="kt">OnboardingScreen</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">AutomationIdentifying</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">complete</span> <span class="o">=</span> <span class="s">"automation.onboarding.complete"</span>
    <span class="p">}</span>

    <span class="kd">enum</span> <span class="kt">ContentScreen</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">AutomationIdentifying</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">title</span> <span class="o">=</span> <span class="s">"automation.content.title"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">AutomationIdentifying</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>
<span class="kd">extension</span> <span class="kt">AutomationIdentifying</span> <span class="k">where</span> <span class="k">Self</span><span class="p">:</span> <span class="kt">RawRepresentable</span><span class="p">,</span> <span class="k">Self</span><span class="o">.</span><span class="kt">RawValue</span> <span class="o">==</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="n">rawValue</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A Swift View extension helps us enforce type safety</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">automationId</span><span class="p">(</span><span class="n">_</span> <span class="nv">identifying</span><span class="p">:</span> <span class="kt">AutomationIdentifying</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="nf">accessibilityIdentifier</span><span class="p">(</span><span class="n">identifying</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Now, in our <code class="language-plaintext highlighter-rouge">OnboardingView</code> we update our button with an identifier:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Button</span><span class="p">(</span>
    <span class="nv">action</span><span class="p">:</span> <span class="n">complete</span><span class="p">,</span>
    <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Okay"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">)</span>
<span class="o">.</span><span class="nf">automationId</span><span class="p">(</span>
    <span class="kt">Automation</span>
        <span class="o">.</span><span class="kt">OnboardingScreen</span>
        <span class="o">.</span><span class="n">complete</span>
<span class="p">)</span>
</code></pre></div></div>
<p>In our <code class="language-plaintext highlighter-rouge">ContentView</code> we add our identifier:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Text</span><span class="p">(</span><span class="s">"Our main app flow"</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">automationId</span><span class="p">(</span>
        <span class="kt">Automation</span>
            <span class="o">.</span><span class="kt">ContentScreen</span>
            <span class="o">.</span><span class="n">title</span>
    <span class="p">)</span>
</code></pre></div></div>

<h4 id="lets-update-our-ui-test">Let’s update our UI test</h4>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="kd">func</span> <span class="nf">testAfterSkippingOnboardingContentViewIsVisible</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">contentViewTitleElement</span> <span class="o">=</span> <span class="n">app</span><span class="o">.</span><span class="n">staticTexts</span><span class="p">[</span>
            <span class="kt">Automation</span><span class="o">.</span><span class="kt">ContentScreen</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">rawValue</span>
        <span class="p">]</span>
        <span class="kt">XCTAssert</span><span class="p">(</span><span class="n">contentViewTitleElement</span><span class="o">.</span><span class="n">exists</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>And our test passes, woot! … but imagine the other UI tests to follow that rely on us being on this screen, duplicating this same logic and having to know so much of the internals of the implementation.</p>

<h4 id="its-robot-time">…it’s Robot time</h4>
<p>Here’s the approach we’ll take:</p>

<ul>
  <li>Model a view or independent portions as a component / screen</li>
  <li>Use a fluent interface to chain behaviours and assertions</li>
  <li>For interactions use the imperative tense i.e commands such as <code class="language-plaintext highlighter-rouge">select</code>, <code class="language-plaintext highlighter-rouge">next</code>, <code class="language-plaintext highlighter-rouge">complete</code></li>
  <li>For assertions use the present tense <code class="language-plaintext highlighter-rouge">is</code>, <code class="language-plaintext highlighter-rouge">has</code>, <code class="language-plaintext highlighter-rouge">shows</code> etc</li>
</ul>

<p>First let’s introduce an <code class="language-plaintext highlighter-rouge">XCUIElementQuery</code> helper so we can query for <code class="language-plaintext highlighter-rouge">AutomationIdentifiers</code> directly.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">XCUIElementQuery</span> <span class="p">{</span>
    <span class="nf">subscript</span><span class="p">(</span><span class="n">_</span> <span class="nv">identifying</span><span class="p">:</span> <span class="kt">AutomationIdentifying</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">XCUIElement</span> <span class="p">{</span>
        <span class="k">self</span><span class="p">[</span><span class="n">identifying</span><span class="o">.</span><span class="n">id</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">}</span> 
</code></pre></div></div>
<p>Then we model our view as a screen hiding the implementation and exposing the assertions and interactions into a ‘Robot’:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ContentScreen</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">app</span><span class="p">:</span> <span class="kt">XCUIApplication</span>
    <span class="nf">init</span><span class="p">(</span><span class="n">_</span> <span class="nv">app</span><span class="p">:</span> <span class="kt">XCUIApplication</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">app</span> <span class="o">=</span> <span class="n">app</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">XCUIElement</span> <span class="p">{</span>
        <span class="n">app</span><span class="o">.</span><span class="n">staticTexts</span><span class="p">[</span><span class="kt">Automation</span><span class="o">.</span><span class="kt">ContentScreen</span><span class="o">.</span><span class="n">title</span><span class="p">]</span>
    <span class="p">}</span>

    <span class="kd">@discardableResult</span>
    <span class="kd">func</span> <span class="nf">isOnScreen</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="k">Self</span> <span class="p">{</span>
        <span class="kt">XCTAssert</span><span class="p">(</span><span class="n">title</span><span class="o">.</span><span class="n">exists</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Our <code class="language-plaintext highlighter-rouge">ContentScreen</code> Robot takes the <code class="language-plaintext highlighter-rouge">app</code> instance to use and while this might feel like boilerplate, after all, when would we need another app? Well, actually in a number of important scenarios such as:</p>
<ul>
  <li>When we need to access a platform screen such as accessing <code class="language-plaintext highlighter-rouge">Safari</code> with <code class="language-plaintext highlighter-rouge">XCUIApplication(bundleIdentifier: "com.apple.mobilesafari")</code></li>
  <li>Or <code class="language-plaintext highlighter-rouge">App settings</code> with <code class="language-plaintext highlighter-rouge">XCUIApplication(bundleIdentifier: "com.apple.Preferences")</code></li>
</ul>

<p>We’ve covered a lot of ground already but let’s finally refactor our test.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">testAfterSkippingOnboardingContentViewIsVisible</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">ContentScreen</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">isOnScreen</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div></div>
<p>Looks good, it’s easy to read and understand but it’s a little too simple. Let’s tackle a more complex scenario next time.</p>

<h4 id="what-did-we-cover">What did we cover?</h4>
<ol>
  <li>A simple mechanism for starting the application in a pre-configured state through <code class="language-plaintext highlighter-rouge">AppLauncher</code>, <code class="language-plaintext highlighter-rouge">LaunchArguments</code>, <code class="language-plaintext highlighter-rouge">LaunchArgumentConfigurator</code> and <code class="language-plaintext highlighter-rouge">AutomationContext</code> configured from UI tests.</li>
  <li><code class="language-plaintext highlighter-rouge">BaseUITestCase</code> to encapsulate the understanding of launch argument configuration.</li>
  <li>A strongly-typed approach for accessibility identifiers via the <code class="language-plaintext highlighter-rouge">Automation</code> enums</li>
  <li>Encapsulating assertions and behaviours in a ‘Robot’ allowing the call site to be easily readable and understandable.</li>
  <li>Passing our failing test and refactoring to use Robots.</li>
</ol>

<h3 id="whats-next">What’s next?</h3>

<ul>
  <li>We’ll flesh out our <code class="language-plaintext highlighter-rouge">Onboarding</code> flow views</li>
  <li>Add some more advanced behaviours to test</li>
  <li>Add UI tests for our introduced <code class="language-plaintext highlighter-rouge">Onboarding</code> flow.</li>
  <li>Swap our dangerous use of <code class="language-plaintext highlighter-rouge">UserDefaults</code> for an <code class="language-plaintext highlighter-rouge">AutomationContext</code>-led but in-memory alternative</li>
</ul>

<p>I hope this post was informative, feel free to send me your thoughts via Twitter.</p>

<p><strong>Footnotes:</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><em>In a real app you’ll want to do this when you have more than one use case (I use the rule of three - on the third repetition, abstract and improve)</em> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><em>We’re implicitly unwrapping here to allow for setup and teardown to clean up appropriately.</em> <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET