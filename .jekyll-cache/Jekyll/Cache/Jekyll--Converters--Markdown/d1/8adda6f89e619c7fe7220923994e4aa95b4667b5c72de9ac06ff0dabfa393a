I"ÌG<h3 id="who-is-this-series-for">Who is this series for?</h3>

<p>Anyone looking for a full end-to-end approach to UI testing in a pragmatic and predictable way</p>

<p>What this series isnâ€™t:</p>

<ul>
  <li>The <em>only</em> way to handle UI test automation</li>
  <li>Without tradeoffs that Iâ€™ll attempt to point out</li>
  <li>Covering when or why UI tests are a great choice</li>
  <li>Covering mocking network requests.</li>
  <li>Covering the alterations required for structured concurrency and actors</li>
</ul>

<p>Hereâ€™s the <strong>TL;DR</strong>; of what Iâ€™ll cover in the series:</p>

<ul>
  <li>CommandLine argument-based app initialisation</li>
  <li>An approach for app configuration (using SwiftUI as an example)</li>
  <li>How to isolate our UI test state across builds</li>
  <li>Some helpers for UI test scenario configuration</li>
  <li>A Robots-like approach for UI tests using a fluent interface</li>
  <li>The end-to-end illustrated</li>
</ul>

<p><em>If that sounds interesting, read on.</em></p>

<h4 id="here-are-the-scenarios-well-cover-in-the-series">Here are the scenarios weâ€™ll cover in the series:</h4>

<ol>
  <li>Our app has a lengthy first-run only onboarding flow that we want to skip for all but our onboarding UI tests</li>
  <li>We want to isolate our UI tests to use <em>static</em> data in a staging environment (see the risks<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> here)</li>
  <li>We want to enable some additional scenario configuration</li>
</ol>

<p>The core parts of this approach are an <code class="language-plaintext highlighter-rouge">AppLauncher</code> to allow us to read and configure our environment before the app is run.</p>

<p>An <code class="language-plaintext highlighter-rouge">AutomationContext</code> acts as a live-defaulted environment we can use for configuring and tracking automation arguments.</p>

<p>A <code class="language-plaintext highlighter-rouge">LaunchArgumentBuilder</code> to make it easy to configure our scenarios</p>

<p>A <code class="language-plaintext highlighter-rouge">UITestScreen</code> to make it easy to encapsulate assertions and behaviours.</p>

<p>In this first post, weâ€™ll cover the <em>setup</em> required to address our first scenario.</p>

<h4 id="what-to-know-before-we-start">What to know before we start</h4>

<p>UI tests run in their own process separate from your app and remotely interface with it. Youâ€™ll no doubt have seen this when you see <code class="language-plaintext highlighter-rouge">"MyAppUITests-Runner"</code> installed in the simulator before your app is installed and run.
What does this mean? it means your app is mostly<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> run like a black box where the only points of interface are on the initialisation of your app via launch arguments and through the accessibility engine that underpins XCTest.</p>

<p><em>Where does that leave us?</em> with app initialisation via launch arguments as our primary means of configuring the app.</p>

<h3 id="lets-skip-onboarding">Letâ€™s Skip Onboarding</h3>
<p>Letâ€™s imagine our simplified app looks something like this, when the app starts we initialise our state around onboarding.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">@main</span>
<span class="kd">struct</span> <span class="kt">MyApp</span><span class="p">:</span> <span class="kt">App</span> <span class="p">{</span>

    <span class="kd">@StateObject</span> <span class="k">var</span> <span class="nv">app</span> <span class="o">=</span> <span class="kt">AppViewModel</span><span class="p">()</span>

    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">Scene</span> <span class="p">{</span>
        <span class="kt">WindowGroup</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">app</span><span class="o">.</span><span class="n">showOnboarding</span> <span class="p">{</span>
                <span class="kt">OnboardingView</span><span class="p">(</span>
                    <span class="nv">complete</span><span class="p">:</span> <span class="p">{</span>
                        <span class="n">app</span><span class="o">.</span><span class="nf">markOnboardingSeen</span><span class="p">()</span>
                    <span class="p">}</span>
                <span class="p">)</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="kt">MainAppFlowView</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">SettingStorage</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">showOnboarding</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">AppViewModel</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="kd">@Published</span> <span class="kd">private(set)</span> <span class="k">var</span> <span class="nv">showOnboarding</span><span class="p">:</span> <span class="kt">Bool</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">settingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">settingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span> <span class="o">=</span> <span class="kt">SettingStore</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">settingStore</span> <span class="o">=</span> <span class="n">settingStore</span>
        <span class="n">showOnboarding</span> <span class="o">=</span> <span class="n">settingStore</span><span class="o">.</span><span class="n">showOnboarding</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">markOnboardingSeen</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">settingStore</span><span class="o">.</span><span class="n">showOnboarding</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">showOnboarding</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p>An example <code class="language-plaintext highlighter-rouge">SettingsStore</code> might just be a wrapper around <code class="language-plaintext highlighter-rouge">UserDefaults</code>:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span> <span class="p">{</span>
	<span class="kd">static</span> <span class="k">let</span> <span class="nv">shared</span> <span class="o">=</span> <span class="kt">SettingsStore</span><span class="p">()</span>
	<span class="kd">private</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{}</span>
	
    <span class="k">var</span> <span class="nv">showOnboarding</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span>
            <span class="kt">UserDefaults</span><span class="o">.</span><span class="n">standard</span><span class="o">.</span><span class="nf">bool</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="s">"hasOnboardingBeenShown"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="kt">UserDefaults</span><span class="o">.</span><span class="n">standard</span><span class="o">.</span><span class="nf">set</span><span class="p">(</span><span class="n">newValue</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="s">"hasOnboardingBeenShown"</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Introducing an <code class="language-plaintext highlighter-rouge">AutomationContext</code> is the next step.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">AutomationContext</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">shared</span> <span class="o">=</span> <span class="kt">AutomationContext</span><span class="p">()</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">settingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span>

    <span class="k">var</span> <span class="nv">showOnboarding</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="n">settingStore</span><span class="o">.</span><span class="n">showOnboarding</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="nf">init</span><span class="p">(</span><span class="nv">settingStore</span><span class="p">:</span> <span class="kt">SettingStorage</span> <span class="o">=</span> <span class="kt">SettingStore</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">settingStore</span> <span class="o">=</span> <span class="n">settingStore</span>

        <span class="n">showOnboarding</span> <span class="o">=</span> <span class="n">settingStore</span><span class="o">.</span><span class="n">showOnboarding</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><em>NOTE:</em> That it uses the <em>same settings store</em> and is <em>initialised in the same way</em>, if we use the <code class="language-plaintext highlighter-rouge">UserDefaults</code> wrapper for this it being a different instance has no impact.</p>

<p>Next, we need a way to pre-configure the automation context.
So letâ€™s create an <code class="language-plaintext highlighter-rouge">AppLauncher</code> which will grab the <code class="language-plaintext highlighter-rouge">CommandLine</code> arguments weâ€™ll use to configure the application run and a <code class="language-plaintext highlighter-rouge">LaunchArgumentConfigurator</code> to parse our arguments and update our <code class="language-plaintext highlighter-rouge">AutomationContext</code> and app state.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">@main</span>
<span class="kd">enum</span> <span class="kt">AppLauncher</span> <span class="p">{</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="k">throws</span> <span class="p">{</span>

        <span class="kt">LaunchArgumentConfigurator</span><span class="o">.</span><span class="nf">configure</span><span class="p">(</span><span class="kt">AutomationContext</span><span class="o">.</span><span class="n">shared</span><span class="p">,</span> <span class="nv">with</span><span class="p">:</span> <span class="kt">CommandLine</span><span class="o">.</span><span class="n">arguments</span><span class="p">)</span>

        <span class="kt">MyApp</span><span class="o">.</span><span class="nf">main</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// NOTE: Over in MyApp we remove @main as the entry point</span>
<span class="kd">struct</span> <span class="kt">MyApp</span><span class="p">:</span> <span class="kt">App</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>

<span class="kd">enum</span> <span class="kt">LaunchArgumentConfigurator</span> <span class="p">{</span>

    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">configure</span><span class="p">(</span><span class="n">_</span> <span class="nv">context</span><span class="p">:</span> <span class="kt">LaunchAutomationContext</span><span class="p">,</span> <span class="n">with</span> <span class="nv">launchArguments</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">])</span> <span class="p">{</span>
    	<span class="k">if</span> <span class="n">launchArguments</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="s">"-skipOnboarding"</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">context</span><span class="o">.</span><span class="n">showOnboarding</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So what have we done? Weâ€™ve removed <code class="language-plaintext highlighter-rouge">@main</code> from <code class="language-plaintext highlighter-rouge">MyApp</code> and introduced a new entry point.
Weâ€™ve expanded the role of <code class="language-plaintext highlighter-rouge">AutomationContext</code> to enable configuring our <code class="language-plaintext highlighter-rouge">SettingsStore</code> before <code class="language-plaintext highlighter-rouge">MyApp</code> is run and then finally weâ€™ve started our app.</p>

<p>What are the downsides of this approach? Well, weâ€™ve likely introduced some additional app start time as the settings store is initialised, read and written to.</p>

<p>What have we gained here? The ability to unit test our <code class="language-plaintext highlighter-rouge">LaunchArgumentConfigurator, AutomationContext, AppViewModel and SettingStore</code> via mutations to an injectable instance of <code class="language-plaintext highlighter-rouge">SettingsStorable</code> before we even get to UI tests which can now be configured to skip onboarding via a launch argument.</p>

<h4 id="how-do-we-skip-onboarding">How do we skip onboarding?</h4>
<p>We just need to run the app with the launch argument <code class="language-plaintext highlighter-rouge">"-skipOnboarding"</code>:</p>
<ul>
  <li>You can do that in your scheme like so. <img src="/assets/images/ui-automation-scheme-arguments.png" alt="alt text" title="Scheme &gt; Run &gt; Arguments &gt; Arguments Passed On Launch showing our skip onboarding flag" /></li>
  <li>Or via the launch argument of your app in a UI test
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">testSkipsOnboarding</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">app</span> <span class="o">=</span> <span class="kt">XCUIApplication</span><span class="p">()</span>
  <span class="n">app</span><span class="o">.</span><span class="n">launchArguments</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"-skipOnboarding"</span><span class="p">)</span>
  <span class="n">app</span><span class="o">.</span><span class="nf">launch</span><span class="p">()</span>

  <span class="kt">XCTFail</span><span class="p">(</span><span class="s">"TODO: Verifying onboarding skipped"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="what-could-we-do-better">What could we do better?</h4>

<ol>
  <li>Weâ€™ve left ourselves with a failing test, we should fix that in the next post</li>
  <li>We should abstract strings so they are maintainable and less prone to error</li>
  <li>Our use of <code class="language-plaintext highlighter-rouge">UserDefaults.standard</code> means that we havenâ€™t isolated our settings across different builds of the same app i.e if you had a Development vs Internal vs AppStore build theyâ€™d all share the same <code class="language-plaintext highlighter-rouge">UserDefaults</code> at the moment.</li>
  <li>We rely on a mutation of <code class="language-plaintext highlighter-rouge">AutomationContext</code> to do work, hiding this in a property setter is a bit unexpected and easy to miss. A nicer way would be to keep sets <code class="language-plaintext highlighter-rouge">private</code> and expose a method to allow this instead.</li>
</ol>

<h3 id="whats-next">Whatâ€™s next?</h3>

<ul>
  <li>Writing our first UI tests to verify our onboarding approach works.</li>
  <li>Introducing enum-based constants for strings and automation identifiers</li>
  <li>Introducing the Robot pattern</li>
</ul>

<p>I hope this post was informative, feel free to send me your thoughts via Twitter.</p>

<p><strong>Footnotes:</strong></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p><em>Relying on live networking makes our UI tests more realistic but also more prone to failure in case of outages, unexpected delays, changes in contract at a separate cadence than the app tests etc. Be aware it also puts additional resource pressure on your backend. If this is an issue, moving to an offline-mock based networking approach can be a good choice but with its own tradeoffs.</em>Â <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p><em>I say mostly because during development you get some ability to inspect and debug your app using things like the XCUI test recorder.</em>Â <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>
:ET