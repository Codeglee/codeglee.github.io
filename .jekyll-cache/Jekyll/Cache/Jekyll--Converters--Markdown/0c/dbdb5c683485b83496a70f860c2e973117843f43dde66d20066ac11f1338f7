I"å%<h3 id="ui-test-automation-continued-where-did-we-get-to">UI test automation continuedâ€¦ where did we get to?</h3>
<p>In the <a href="https://blog.codeglee.com/2022/03/23/an-automation-approach-pt2.html">previous post</a>, we covered encapsulating automation and launch argument constants, encapsulated launch argument configuration for our UI tests and wrapped our interactions and assertions in a Robot screen to make our tests easy to read and understand.</p>

<p>In this post weâ€™ll:</p>

<ul>
  <li>Flesh out our <code class="language-plaintext highlighter-rouge">Onboarding</code> flow views with some more complexity</li>
  <li>Weâ€™ll write UI tests for <code class="language-plaintext highlighter-rouge">Onboarding</code> to address the changes in design</li>
  <li>Introduce an in-memory approach to avoid test pollution</li>
</ul>

<h4 id="lets-make-onboarding-a-bit-more-complex">Letâ€™s make onboarding a bit more complexâ€¦</h4>

<p>Letâ€™s introduce a 3 stage onboarding process. Iâ€™ll model that with an <code class="language-plaintext highlighter-rouge">OnboardingStage</code> enum.
For the sake of brevity, Iâ€™ll extend this enum to return content-specific to the stage.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">OnboardingStage</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="kt">CaseIterable</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">initial</span>
    <span class="k">case</span> <span class="n">catalog</span>
    <span class="k">case</span> <span class="n">confirm</span>
    
    <span class="k">var</span> <span class="nv">icon</span><span class="p">:</span> <span class="kt">Image</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span> 
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">buttonTitle</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">buttonColour</span><span class="p">:</span> <span class="kt">Color</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">buttonAutomationId</span><span class="p">:</span> <span class="kt">AutomationIdentifying</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Then a cut down version of our onboarding view</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">OnboardingView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@State</span> <span class="k">var</span> <span class="nv">stage</span><span class="p">:</span> <span class="kt">OnboardingStage</span> <span class="o">=</span> <span class="o">.</span><span class="n">initial</span>
    
    <span class="k">let</span> <span class="nv">complete</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">GeometryReader</span> <span class="p">{</span> <span class="n">geometry</span> <span class="k">in</span>
            <span class="kt">ZStack</span><span class="p">(</span><span class="nv">alignment</span><span class="p">:</span> <span class="o">.</span><span class="n">bottom</span><span class="p">)</span> <span class="p">{</span>
                <span class="kt">Color</span><span class="o">.</span><span class="n">clear</span>

                <span class="kt">VStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">25</span><span class="p">)</span> <span class="p">{</span>

                    <span class="k">Self</span><span class="o">.</span><span class="nf">onboardingPage</span><span class="p">(</span>
                        <span class="nv">for</span><span class="p">:</span> <span class="n">stage</span><span class="p">,</span>
                        <span class="nv">in</span><span class="p">:</span> <span class="n">geometry</span>
                    <span class="p">)</span>

                    <span class="kt">Button</span><span class="p">(</span>
                        <span class="nv">action</span><span class="p">:</span> <span class="p">{</span>
                            <span class="k">if</span> <span class="n">stage</span><span class="o">.</span><span class="n">isLast</span> <span class="p">{</span>
                                <span class="nf">complete</span><span class="p">()</span>
                            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                                <span class="n">withAnimation</span> <span class="p">{</span>
                                    <span class="n">stage</span><span class="o">.</span><span class="nf">next</span><span class="p">()</span>
                                <span class="p">}</span>
                            <span class="p">}</span>
                        <span class="p">},</span>
                        <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
                            <span class="kt">Text</span><span class="p">(</span><span class="n">stage</span><span class="o">.</span><span class="n">buttonTitle</span><span class="p">)</span>
                                <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="nf">system</span><span class="p">(</span><span class="o">.</span><span class="n">title3</span><span class="p">,</span> <span class="nv">design</span><span class="p">:</span> <span class="o">.</span><span class="n">rounded</span><span class="p">))</span>
                                <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
                                <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">vertical</span><span class="p">)</span>
                                <span class="o">.</span><span class="nf">background</span><span class="p">(</span>
                                    <span class="kt">RoundedRectangle</span><span class="p">(</span>
                                        <span class="nv">cornerRadius</span><span class="p">:</span> <span class="kt">Style</span><span class="o">.</span><span class="n">cornerRadius</span><span class="p">,</span>
                                        <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">continuous</span>
                                    <span class="p">)</span><span class="o">.</span><span class="nf">fill</span><span class="p">(</span><span class="n">stage</span><span class="o">.</span><span class="n">buttonColour</span><span class="p">)</span>
                                <span class="p">)</span>
                                <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">primary</span><span class="p">)</span>
                        <span class="p">})</span>
                    <span class="o">.</span><span class="nf">buttonStyle</span><span class="p">(</span><span class="o">.</span><span class="n">plain</span><span class="p">)</span>
                    <span class="o">.</span><span class="nf">automationId</span><span class="p">(</span><span class="n">stage</span><span class="o">.</span><span class="n">automationId</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">horizontal</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>    
</code></pre></div></div>
<p>Iâ€™ve pulled</p>

<h3 id="whats-next">Whatâ€™s next?</h3>

<ul>
  <li>How to handle variability (waiting for .exists), waiting for animation lag etc</li>
  <li>Approaches for Network mocking</li>
  <li>How to fully clean up (delete app from simulator, restart?)</li>
</ul>

<h4 id="what-can-we-improve">What can we improve?</h4>
<p>Weâ€™re still using <code class="language-plaintext highlighter-rouge">.rawValue</code> rather than creating typed extensions to ensure strong typing.</p>

<h4 id="what-did-we-cover">What did we cover?</h4>
<ol>
  <li></li>
</ol>

<h3 id="whats-next-1">Whatâ€™s next?</h3>

<ul>
  <li>Weâ€™ll flesh out our <code class="language-plaintext highlighter-rouge">Onboarding</code> flow views</li>
</ul>

<p>I hope this post was informative, feel free to send me your thoughts via Twitter.</p>

<p><strong>Footnotes:</strong></p>

:ET